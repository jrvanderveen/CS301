#lang racket
;takes two sets and returns a sigle set (no repeated values)
(define union
  (lambda(l1 l2)
    (cond [(null? l1) l2]
          [(member(car l1) l2)
           (union(cdr l1) l2)]
          (else(cons(car l1) (union(cdr l1) l2)))))) 

;;;;;;;;;;;;;;;;;;;;;;;
;takes two sets and returns a single set of the intersection
(define intersection
  (lambda(l1 l2)
    (cond [(null? l1) '()]
          [(member(car l1) l2)
           (cons(car l1) (intersection(cdr l1) l2))]
          (else(intersection(cdr l1) l2)))))

;;;;;;;;;;;;;;;;;;;;;;;
;difference takes two lists and returns the difference between them
(define difference
  (lambda (s1 s2)
    (cond [(null? s1)'()]
          [(not (member (car s1) s2))
           (cons (car s1) (difference (cdr s1) s2))]
           (else(difference (cdr s1) s2)))))

;;;;;;;;;;;;;;;;;;;;;;;
;symmetric-difference takes two lists and returns their symmetric difference
(define symmetric-difference
  (lambda (s1 s2)
    (union (difference s1 s2) (difference s2 s1))))

;;;;;;;;;;;;;;;;;;;;;;;
;main function
(define set-value
  (lambda (s1)
    (cond [(equal?(car (cdr s1)) 'intersection)
           (intersection (car s1) (cdr (cdr s1)))]
          (else '(a)))))
(set-value '((a b c) intersection (b c d)))

(intersection '(a b c) '(b c d))

     
     
     
     
     
     
     
     
   